/**
 * API
 * Create API keys in your profile and use public API key as username and secret as password to authorize.
 *
 * The version of the OpenAPI document: 2.19.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.mycelium.bequant.remote.trading.model


import com.squareup.moshi.Json

/**
 *
 * @param id
 * @param symbol
 * @param status
 * @param quantity
 * @param leverage position leverage value
 * @param pnl cumulative profit and loss (quoted in the currency of the symbol)
 * @param margin
 * @param marginOrders
 * @param marginRequired
 * @param priceEntry
 * @param priceCloseOnly
 * @param priceLiquidation
 * @param createdAt
 * @param updatedAt
 */

data class Position(
        @Json(name = "id")
        val id: kotlin.Long,
        @Json(name = "symbol")
        val symbol: kotlin.String,
        @Json(name = "status")
        val status: Position.Status,
        @Json(name = "quantity")
        val quantity: kotlin.Double,
        /* position leverage value */
        @Json(name = "leverage")
        val leverage: kotlin.Double,
        /* cumulative profit and loss (quoted in the currency of the symbol) */
        @Json(name = "pnl")
        val pnl: kotlin.Double,
        @Json(name = "margin")
        val margin: kotlin.Double,
        @Json(name = "marginOrders")
        val marginOrders: kotlin.Double,
        @Json(name = "marginRequired")
        val marginRequired: kotlin.Double,
        @Json(name = "priceEntry")
        val priceEntry: kotlin.Double,
        @Json(name = "priceCloseOnly")
        val priceCloseOnly: kotlin.Double,
        @Json(name = "priceLiquidation")
        val priceLiquidation: kotlin.Double,
        @Json(name = "createdAt")
        val createdAt: java.util.Date,
        @Json(name = "updatedAt")
        val updatedAt: java.util.Date
) {

    /**
     *
     * Values: normal,blocked,untouchable,closeOnly
     */

    enum class Status(val value: kotlin.String) {
        @Json(name = "normal")
        normal("normal"),
        @Json(name = "blocked")
        blocked("blocked"),
        @Json(name = "untouchable")
        untouchable("untouchable"),
        @Json(name = "closeOnly")
        closeOnly("closeOnly");
    }
}

