/**
* Auth API
* Auth API<br> <a href='/changelog'>Changelog</a>
*
* The version of the OpenAPI document: v0.0.50
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.mycelium.bequant.remote.client.apis

import com.mycelium.bequant.remote.client.models.Error
import com.mycelium.bequant.remote.client.models.KycCheckMobilePhoneRequest
import com.mycelium.bequant.remote.client.models.KycCreateRequest
import com.mycelium.bequant.remote.client.models.KycSaveMobilePhoneRequest
import com.mycelium.bequant.remote.client.models.KycStatusResponse
import com.mycelium.bequant.remote.client.models.KycUser
import com.mycelium.bequant.remote.client.models.KycUserDocsResponse
import com.mycelium.bequant.remote.client.models.SessionIssuesResponse

import com.mycelium.bequant.remote.client.RetrofitHolder
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.create
import retrofit2.http.*
import okhttp3.*
import retrofit2.http.Headers

interface KYCApi {
    
    /**
    * KYC Delete Proof of Address
    * KYC Delete Proof of Address &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return void
    */
    @DELETE("kyc/documents/address_doc")
    
    suspend fun deleteKycDocumentsAddressDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<Unit>

    /**
    * KYC Delete Identity Document
    * KYC Delete Identity Document &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return void
    */
    @DELETE("kyc/documents/identity_doc")
    
    suspend fun deleteKycDocumentsIdentityDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<Unit>

    /**
    * KYC Delete Selfie
    * KYC Delete Selfie &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return void
    */
    @DELETE("kyc/documents/selfie_doc")
    
    suspend fun deleteKycDocumentsSelfieDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<Unit>

    /**
    * KYC Download Proof of Address
    * KYC Download Proof of Address &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return java.io.File
    */
    @GET("kyc/documents/address_doc")
    
    suspend fun getKycDocumentsAddressDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<ResponseBody>

    /**
    * KYC Download Identity Document
    * KYC Download Identity Document &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return java.io.File
    */
    @GET("kyc/documents/identity_doc")
    
    suspend fun getKycDocumentsIdentityDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<ResponseBody>

    /**
    * KYC Download Selfie
    * KYC Download Selfie &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 404: Not Found
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param fileId  
    * @return java.io.File
    */
    @GET("kyc/documents/selfie_doc")
    
    suspend fun getKycDocumentsSelfieDoc(
        @Query("file_id") fileId: kotlin.Int
    ): Response<ResponseBody>

    /**
    * KYC Get all account files
    * KYC Get all account files&lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @return KycUserDocsResponse
    */
    @GET("kyc/documents/user_docs")
    
    suspend fun getKycDocumentsUserDocs(
        
    ): Response<KycUserDocsResponse>

    /**
    * Get KYC request status
    * Get KYC request status&lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @return KycStatusResponse
    */
    @GET("kyc/status")
    
    suspend fun getKycStatus(
        
    ): Response<KycStatusResponse>

    /**
    * Get account with KYC info
    * Get account with KYC info &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: User
    *  - 421: Token expired
    *  - 0: error
    * 
    * @return void
    */
    @GET("kyc/user")
    
    suspend fun getKycUser(
        
    ): Response<Unit>

    /**
    * KYC check mobile phone
    * KYC check mobile phone &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param kycCheckMobilePhoneRequest  
    * @return void
    */
    @POST("kyc/check_mobile_phone")
    
    suspend fun postKycCheckMobilePhone(
        @Body kycCheckMobilePhoneRequest: KycCheckMobilePhoneRequest
    ): Response<Unit>

    /**
    * Create KYC request
    * Create KYC request &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param kycCreateRequest  
    * @return void
    */
    @POST("kyc/create")
    
    suspend fun postKycCreate(
        @Body kycCreateRequest: KycCreateRequest
    ): Response<Unit>

    /**
    * KYC delete mobile phone
    * KYC delete mobile phone &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @return void
    */
    @POST("kyc/delete_mobile_phone")
    
    suspend fun postKycDeleteMobilePhone(
        
    ): Response<Unit>

    /**
    * KYC Create Proof of Address
    * KYC Create Proof of Address&lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 406: Not acceptable
    *  - 412: File size can't be less than 500KB
    *  - 413: File size can't be more than 10MB
    *  - 415: Unsupported file type
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param file  (optional)
    * @return void
    */
    @POST("kyc/documents/address_doc")
    @Multipart
    
    suspend fun postKycDocumentsAddressDoc(
        @Part file: MultipartBody.Part? = null
    ): Response<Unit>

    /**
    * KYC Create Identity Document
    * KYC Create Identity Document &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 406: Not acceptable
    *  - 412: File size can't be less than 500KB
    *  - 413: File size can't be more than 10MB
    *  - 415: Unsupported file type
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param file  (optional)
    * @return void
    */
    @POST("kyc/documents/identity_doc")
    @Multipart
    
    suspend fun postKycDocumentsIdentityDoc(
        @Part file: MultipartBody.Part? = null
    ): Response<Unit>

    /**
    * KYC Create Selfie
    * KYC Create Selfie&lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 406: Not acceptable
    *  - 412: File size can't be less than 500KB
    *  - 413: File size can't be more than 10MB
    *  - 415: Unsupported file type
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param file  (optional)
    * @return void
    */
    @POST("kyc/documents/selfie_doc")
    @Multipart
    
    suspend fun postKycDocumentsSelfieDoc(
        @Part file: MultipartBody.Part? = null
    ): Response<Unit>

    /**
    * KYC request verification
    * KYC request verification &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @return void
    */
    @POST("kyc/request_verification")
    
    suspend fun postKycRequestVerification(
        
    ): Response<Unit>

    /**
    * KYC save mobile phone
    * KYC save mobile phone &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param kycSaveMobilePhoneRequest  
    * @return void
    */
    @POST("kyc/save_mobile_phone")
    
    suspend fun postKycSaveMobilePhone(
        @Body kycSaveMobilePhoneRequest: KycSaveMobilePhoneRequest
    ): Response<Unit>

    /**
    * Update KYC request
    * Update KYC request &lt;br&gt;&lt;b style&#x3D;\&quot;color:red;\&quot;&gt;Bearer access token required!&lt;/b&gt;
    * Responses:
    *  - 200: OK
    *  - 401: Api key is missing or invalid
    *  - 403: Api key is missing or invalid
    *  - 420: Session issues
    *  - 421: Token expired
    *  - 0: error
    * 
    * @param kycCreateRequest  
    * @return void
    */
    @POST("kyc/update")
    
    suspend fun postKycUpdate(
        @Body kycCreateRequest: KycCreateRequest
    ): Response<Unit>


    companion object {
        fun create(retrofit: Retrofit = RetrofitHolder.retrofit): KYCApi = retrofit.create()
    }
}
